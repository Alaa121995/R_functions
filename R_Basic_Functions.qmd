---
title: "R Basic Functions"
format: html
editor: visual
---

Welcome to R Basic Functions document!

In this document, you will learn how to start up and buildup your work in R :)

### Importing a data-set

<details>

First of all, we need to install tidyverse, here, skimr, dplyr and janitor packages in your Console. This is to be done by typing install.package("tidyverse") in your console, and similarly for the rest as well.

#### From your computer to R

For this section, we need tidyverse and here functions. Tidyverse package helps you using the read_csv(). function. You might use read.csv(). function as well. This function is part of the base R packages. The only difference between them is the output, which is more organised with rank numbers using read_csv(). function from the tidyverse package. Then you need to reload these packages in your script using the following code.

```{r message=FALSE, warning=FALSE}
#| echo: true
library(tidyverse)
library(here)
library(dplyr)
```

There after you will type your code to import your csv file to your R studio using the following codes.

To illustrate the function in this document, dataset from rladiessydney/RYouWithMe is used. You can find it here: [sydneybeaches.csv](https://github.com/rladiessydney/RYouWithMe/blob/master/sydneybeaches.csv)

These are templates you might use: read_csv(here("where to find", "your data name"))

read.csv("path/to/your/file.csv")

```{r message=FALSE, warning=FALSE}
#| echo: true
library(tidyverse)
library(here)

Sydneybeaches <- read_csv(here("data", "sydneybeaches.csv"))
```

#### From online platform

you can use the url or the link to the database you can use read.csv(). function.

</details>

### Exporting your data-set

<details>

In this case you need to determine the place where to put your data and the name you want to give following by ".csv" if you want it as an csv file.

```{r}
write_csv(Sydneybeaches, here("data", "SydneybeachesClean.csv"))
```

#### Exploring Data in your data-set

The next step is to explore you data using the following functions.

```{r message=FALSE, warning=FALSE}
view(Sydneybeaches)
dim(Sydneybeaches)
str(Sydneybeaches) 
glimpse(Sydneybeaches) 
head(Sydneybeaches) 
tail(Sydneybeaches) 
summary(Sydneybeaches)
```

The view(). function is to open your data set as a table in your script part of R studio.

The dim(). function is to show you the dimension of you data, like row and column numbers

The str() function in R is used to compactly display the internal structure of an R object. It provides a concise summary of the object, including its type, length, and a preview of its contents.

The glimpse(). function makes it possible to see every column in a data frame.

The head(). and tail(). functions shows the the first rows and the last rows of your data-set, respectively.

The summary function is used to quickly summarize the values in your data-set. This function provides a concise statistical summary of the data, including measures like minimum, maximum, median, mean, and quartiles.

The skim(). function is to find the "skimr" package which you should to install it in the console first and reload it in the script. This function is an alternative to summary(), quickly providing a broad overview of a data frame.

```{r message=FALSE, warning=FALSE}
library(skimr)
skim(Sydneybeaches)
```

#### Exporting your data-set to a csv file

and you can exporting your data using write_csv(). function, like: write_csv(your data name,"your preferable name.csv").

</details>

### Tidying your data-set

#### Rename function

<details>

You may consider organizing an tidying you data-set. In this case you may rename some column names. For this task you may need to see the column name first using names(). function.

```{r message=FALSE, warning=FALSE}
names(Sydneybeaches)
```

Function toupper(). is used to concert lowercase alphabet to uppercase and function(). tolower is the convert your alphabet to a lowercase. You may consider this functions to tidy your column names.

```{r echo=TRUE, message=TRUE, warning=FALSE}
select_all(Sydneybeaches, toupper) 
select_all(Sydneybeaches, tolower)
```

You may consider clean_names(). function from the "janitor" package. This function is used to clean and standardize the column names of your data-set, making them easier to work with. the function ensures that the resulting names consist only of letters, numbers and underscores.

```{r echo=TRUE, message=FALSE, warning=FALSE}
library(janitor)

Sydneybeaches <- clean_names(Sydneybeaches)
```

In addition, you can use rename(). function from the dplyr package to rename your specific column typing your desired name, following by the old name.

```{r echo=TRUE, message=FALSE, warning=FALSE}
Sydneybeaches <- rename(Sydneybeaches, beachbugs = enterococci_cfu_100ml)
```

</details>

#### Select function

<details>

You can as well select some columns to work with using select(). function, which is part of "dplyr" package.

```{r echo=TRUE, message=FALSE, warning=FALSE}
select(Sydneybeaches, region, council, site)
```

To rearrange your columns you may consider using select(). function and include everything(). function in it. The latter is meant to put all other columns after the first your selected columns.

```{r}
select(Sydneybeaches, council, region, everything())
```

Of note to save the outcome of your work, you should assign it to a variable name using this sign "\<-".

```{r}
outcomebeaches <- select(Sydneybeaches, council, region, site)
```

</details>

#### Arrange function

<details>

you can also arrange rows desendeningly using desc() or sign "-" before the preferable column name. operator or ascendingly in arrange(). function.

```{r}
arrange(Sydneybeaches,desc(beachbugs)) 

arrange(Sydneybeaches,-beachbugs) 

arrange(Sydneybeaches,beachbugs)
```

</details>

#### Pipe operator %\>%

<details>

This operator is used to link functions to your data set. In this case you have not to type your data name at the beginning of any function.

```{r}
Sydneybeaches %>%   select(council, region, beachbugs) %>%   
  arrange(-beachbugs) 
```

</details>

#### Filter function

<details>

filter(). function is used to subset your rows in your data-set by specific conditions.

```{r}
worstcoogee <- Sydneybeaches %>% 

  filter(site == "Coogee Beach")%>%

  arrange(-beachbugs)
```

When there are multiple filters you want to apply you can use %in% c() operator.

```{r}
Sydneybeaches %>%
  filter(site %in% c("Coogee Beach", "Bondi Beach")) %>%
  slice(55:65)
```

</details>

### Statistical summary 

<details>

#### Summarize(). function

summarize(). function offers a statistical summary of your dataset. In this case you determine what you want to know. For example, you can calculate the mean, min, max, median and sd.

```{r}
Sydneybeaches %>%
  na.omit() %>%
  group_by(site) %>%
  summarize(meanbeachbugs = mean(beachbugs),
            maxbeachbugs = max(beachbugs),
            minbeachbugs = min(beachbugs),
            mediabeachbugs = median(beachbugs),
            sdbeachbugs = sd(beachbugs)) %>%
  arrange(-meanbeachbugs)
```

In this example you can see that there is a group_by(). function which is used to gather you data in groups based on your specific groups you have in your data-set. Moreover, you can use arrange(). function with your new variable you make in your summarize(). function.

</details>

#### Separate()., unite(). and mutate(). functions

<details>

you can use separate(). function to separate a column into new columns. a clear example is date that you can separate it into day, month and year. remove = False means that you want to keep the old column in your data-set as well.

```{r}
Sydneybeaches <- Sydneybeaches %>%
  separate(date, c("day", "month", "year"), remove = FALSE)
```

on the other hand, if you want to make a column from multiple separated columns, you can use unite(). function.

```{r}
Sydneybeaches %>%
  unite(council_site, c("council", "site"), remove = FALSE)
```

to calculate a new column used data from an existed column, you can use mutate. The result of your mutate(). function could be continuous or categorical (True, False), based on your input.

```{r}
Sydneybeaches %>%
  na.omit() %>%
  summarize(mean(beachbugs))

Sydneybeaches %>%
  na.omit() %>%
  mutate(buggier = beachbugs > mean(beachbugs))

Sydneybeaches %>%
  na.omit() %>%
  mutate(diffinbugs = beachbugs-lag(beachbugs))
```

lag(). is used to indicate the previous observation in your data-set.

</details>

### Condition functions

<details>

#### ifelse(). function

you can use ifelse(). function to generate a new categorical variable as well.

```{r}
Sydneybeaches$data <- as.factor(ifelse(Sydneybeaches$year < "2016",
                         'old',
                         ifelse(Sydneybeaches$year > "2016",
                                'recent', '')))
```

</details>

#### case_when(). function

<details>

Additionally, you can use case_when for generating a new categorical variable.

```{r}
Sydneybeaches <- Sydneybeaches %>%
  mutate(data2 = case_when(
    year < "2016" ~ "old",
    year > "2016" ~ "recent"))

```

</details>

### Visualization

<details>

in this section we will need install additional packages which are ggbeeswarm, RColorBrewer and

wesanderson. These packages could be used to play with colors in your plots.

```{r message=FALSE, warning=FALSE}
library(ggbeeswarm)
library(RColorBrewer)
library(wesanderson)
```

then, to visualize your data you will need ggplot(). functions with its operators. Here are some of them.

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = year , y = beachbugs , color = council)) +
  geom_point()
```

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = year , y = beachbugs , color = council)) +
  geom_jitter()
```

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = year , y = beachbugs , color = council)) +
  geom_beeswarm()
```

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = site , y = beachbugs , color = council)) +
  geom_jitter()+
  coord_flip()
```

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = site , y = beachbugs , color = council)) +
  geom_jitter()+
  coord_flip()+
  facet_wrap("site")
```

```{r}
Sydneybeaches %>%
  ggplot(mapping = aes(x = site , y = beachbugs , color = council)) +
  geom_jitter()+
  coord_flip()+
  theme_classic()+
  labs(title = "Enterococci bacteria leverls",
       subtitle = "in all sites over the years",
       caption = "data from: specific link",
       x = "site",
       y = "Beach bugs")
```

</details>

### To Export your plot

<details>

You can save your plot as an image using ggsave(). function

```{r message=FALSE, warning=FALSE}
ggsave(here("data", "beachbugs.png"))
```

</details>

### Tables

#### gt(). Function

<details>

you can make tables in R using gt(). package. In this section, i will use a different dataset to illustrate the working of gt(). package functions.

```{r}
library(gt)
islands
```

in order to apply gt package, you need to convert data set to a tibble using as.tibble(). function.

```{r}
islands_tbl <-  tibble(name = names(islands),size = islands) %>%
    arrange(desc(size)) %>%
  slice(1:10)
View(islands_tbl)

gt_tabl <-gt(islands_tbl)
```

To make the table more professional, you can add:

-   a title and sub_title, source note and footnote by using tab_header(title = ..., subtitle=..., ) function.

-   a source note by adding tab_source_note (source_note = .. )

-   a footnote by adding tab_footnote(footnote =.. )

-   locations of these source and footnotes by adding locations = cells_body (columns = ..., rows = ..)

```{r results='asis'}
gt_tabl %>% tab_header(title = md("**Large Landmasses of the World**"), subtitle = md( "the top ten *largest* are presented")) %>%
  tab_stubhead(label = "Landmass") %>%
  tab_source_note(source_note = "Source: the world Almanac and Book")%>%
  tab_footnote(footnote = md("the **largest** by area"), locations = cells_body(columns = size, rows = name == "Asia")) %>%
  tab_footnote(footnote = "the Americans", locations = cells_body(columns = name , rows =3:4))
```

You can separate rows by using tab_row_group() function.

```{r results='asis'}
gt_tabl <- gt_tabl %>%
  tab_row_group(label = "continent",
                rows = 1:6,
                id = "continent_group")
```

</details>

#### gtsummary(). Function

<details>

On the other hand, you can use gtsummary package to make a summary of your dataset and show it as a table

```{r results='asis'}
#| error: false
#| message: false
library(gtsummary)

data <- data.frame(
  age = c(34, 45, 23, 54, 29),
  gender = c("Male", "Female", "Female", "Male", "Male"),
  group = c("Control", "Treatment", "Control", "Treatment", "Control")
)
```

```{r results='asis'}
#| error: false
#| message: false
tbl <- tbl_summary(
  data,
  by = group, # Optional: group by a variable
  statistic = list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} / {N} ({p}%)"),
  digits = all_continuous() ~ 2
)

print(tbl)
```

you can add overall to indicate the whole population and p value to calculate the significance.

```{r results='asis'}
#| message: false
#| error: false
tbl <- tbl_summary(
  data,
  by = group, # Optional: group by a variable
  statistic = list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} / {N} ({p}%)"),
  digits = all_continuous() ~ 2) %>%
  add_overall() %>% add_p()

print(tbl)
```

To calculate the percentages based on rows rather than on columns, you can add percent = row

```{r echo=TRUE, message=FALSE, warning=FALSE, results='asis'}

tbl <- tbl_summary(
  data,
  by = group, # Optional: group by a variable
  statistic = list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} / {N} ({p}%)"),
  percent = "row",
  digits = all_continuous() ~ 2) %>%
  add_overall()%>% add_p()

print(tbl)

```

finally, to change the percentage of the overall to be calculated based on the whole number of the population, you can follow the next code:

```{r results='asis'}
# Example dataset
data <- data.frame(
  groep = c("A", "A", "B", "B", "A", "B"),
  succes = factor(c(1, 2, 1, 3, 4, 4), levels = 1:4, labels = c("Low", "Medium", "High", "Very High")),
  parameter1 = factor(c(1, 2, 2, 4, 4, 3), levels = 1:4, labels = c("Low", "Medium", "High", "Very High")),
  parameter2 = factor(c(2, 2, 1, 4, 1, 4), levels = 1:4, labels = c("Low", "Medium", "High", "Very High"))
)

# Calculate the total number of observations
totaal_populatie <- nrow(data)

# Create the summary table
tble <- data %>%
  tbl_summary(
    by = groep,
    statistic = list(all_categorical() ~ "{n} ({p}%)"),
    percent = "row"
  ) %>%
  add_overall()

# Extract the overall counts for each level of each parameter
overall_counts <- data %>%
  summarise(
    succes_Low = sum(succes == "Low"),
    succes_Medium = sum(succes == "Medium"),
    succes_High = sum(succes == "High"),
    succes_Very_High = sum(succes == "Very High"),
    parameter1_Low = sum(parameter1 == "Low"),
    parameter1_Medium = sum(parameter1 == "Medium"),
    parameter1_High = sum(parameter1 == "High"),
    parameter1_Very_High = sum(parameter1 == "Very High"),
    parameter2_Low = sum(parameter2 == "Low"),
    parameter2_Medium = sum(parameter2 == "Medium"),
    parameter2_High = sum(parameter2 == "High"),
    parameter2_Very_High = sum(parameter2 == "Very High")
  )

# Print overall_counts to check values
print(overall_counts)

# Calculate the overall percentages
overall_percentages <- overall_counts %>%
  mutate(
    across(everything(), ~ . / totaal_populatie * 100)
  )

# Print overall_percentages to check values
print(overall_percentages)

# Update the table with the new overall percentages
tble$table_body <- tble$table_body %>%
  mutate(
    stat_0 = case_when(
      variable == "succes" & label == "Low" ~ paste0(overall_counts$succes_Low, " (", format(overall_percentages$succes_Low, nsmall = 2, digits =1), "%)"),
      variable == "succes" & label == "Medium" ~ paste0(overall_counts$succes_Medium, " (", format(overall_percentages$succes_Medium, nsmall = 2), "%)"),
      variable == "succes" & label == "High" ~ paste0(overall_counts$succes_High, " (", format(overall_percentages$succes_High, nsmall = 2), "%)"),
      variable == "succes" & label == "Very High" ~ paste0(overall_counts$succes_Very_High, " (", format(overall_percentages$succes_Very_High, nsmall = 2), "%)"),
      variable == "parameter1" & label == "Low" ~ paste0(overall_counts$parameter1_Low, " (", format(overall_percentages$parameter1_Low, nsmall = 2), "%)"),
      variable == "parameter1" & label == "Medium" ~ paste0(overall_counts$parameter1_Medium, " (", format(overall_percentages$parameter1_Medium, nsmall = 2), "%)"),
      variable == "parameter1" & label == "High" ~ paste0(overall_counts$parameter1_High, " (", format(overall_percentages$parameter1_High, nsmall = 2), "%)"),
      variable == "parameter1" & label == "Very High" ~ paste0(overall_counts$parameter1_Very_High, " (", format(overall_percentages$parameter1_Very_High, nsmall = 2), "%)"),
      variable == "parameter2" & label == "Low" ~ paste0(overall_counts$parameter2_Low, " (", format(overall_percentages$parameter2_Low, nsmall = 2), "%)"),
      variable == "parameter2" & label == "Medium" ~ paste0(overall_counts$parameter2_Medium, " (", format(overall_percentages$parameter2_Medium, nsmall = 2), "%)"),
      variable == "parameter2" & label == "High" ~ paste0(overall_counts$parameter2_High, " (", format(overall_percentages$parameter2_High, nsmall = 2), "%)"),
      variable == "parameter2" & label == "Very High" ~ paste0(overall_counts$parameter2_Very_High, " (", format(overall_percentages$parameter2_Very_High, nsmall = 2), "%)"),
      TRUE ~ stat_0
    )
  )

# Print the updated table
tble
```

In this example, we:

1.  Convert the `succes`, `parameter1`, and `parameter2` columns to numeric using `as.numeric()`.

2.  Create the summary table with `tbl_summary()` and `add_overall()`.

3.  Extract the overall counts and calculate the overall percentages based on the total study population.

4.  Update the table with these new percentages.

This approach ensures that the "Overall" column shows the correct percentages based on the total study population without adding extra row names or labels.

</details>
